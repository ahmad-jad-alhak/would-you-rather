{"version":3,"file":"customizable.js","sourceRoot":"../src/","sources":["customizable.tsx"],"names":[],"mappings":";;;IAMa,QAAA,wBAAwB,GAAG;QACtC,cAAc,EAAE,SAAS,CAAC,MAAM;KACjC,CAAC;IAEF,sBACE,KAAa,EACb,MAAgB,EAChB,YAAsB;IACtB,kCAAkC;;QAElC,gDAAgD;QAChD,OAAO;QACL,kCAAkC;QAClC,iBAA0E;QAC1E,kCAAkC;;YAElC,IAAM,WAAW;oBAA4C,sDAAsB;oBAKjF,kCAAkC;oBAClC,oCAAY,KAAQ,EAAE,OAAY;wBAAlC,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAGtB;wBADC,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;oBAC7D,CAAC;oBAEM,sDAAiB,GAAxB;wBACE,+BAAc,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBACjD,CAAC;oBAEM,yDAAoB,GAA3B;wBACE,+BAAc,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBACnD,CAAC;oBAEM,2CAAM,GAAb;wBACE,IAAM,YAAY,GAAG,+BAAc,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;wBAE5F,kCAAkC;wBAClC,IAAM,cAAc,GAAG,IAAI,CAAC,KAAY,CAAC;wBAEzC,IAAI,YAAY,EAAE;4BAChB,IAAM,YAAY,GAAG,8BAAe,CAAC,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;4BACjF,OAAO,oBAAC,iBAAiB,uBAAK,YAAY,EAAM,cAAc,IAAE,MAAM,EAAE,YAAY,IAAI,CAAC;yBAC1F;wBAED,OAAO,oBAAC,iBAAiB,uBAAK,YAAY,EAAM,cAAc,EAAI,CAAC;oBACrE,CAAC;oBAEO,sDAAiB,GAAzB;wBACE,IAAI,CAAC,WAAW,EAAE,CAAC;oBACrB,CAAC;oBACH,iCAAC;gBAAD,CAAC,AArCmB,CAAyC,KAAK,CAAC,SAAS;gBAC5D,cAAW,GAAW,YAAY,GAAG,KAAM;gBAE3C,eAAY,GAAG,gCAAyB;mBAkCvD,CAAC;YAEF,OAAO,2BAAY,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;;QACtD,CAAC,CAAC;IACJ,CAAC;IArDD,oCAqDC","sourcesContent":["import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { Customizations } from './Customizations';\r\nimport { hoistStatics } from './hoistStatics';\r\nimport { concatStyleSets } from '@uifabric/merge-styles';\r\n\r\nexport const CustomizableContextTypes = {\r\n  customizations: PropTypes.object\r\n};\r\n\r\nexport function customizable(\r\n  scope: string,\r\n  fields: string[],\r\n  concatStyles?: boolean\r\n  // tslint:disable-next-line:no-any\r\n): <P, S>(ComposedComponent: new (props: P, ...args: any[]) => React.Component<P, S>) => any {\r\n  // tslint:disable-next-line:no-shadowed-variable\r\n  return function customizableFactory<P, S>(\r\n    // tslint:disable-next-line:no-any\r\n    ComposedComponent: new (props: P, ...args: any[]) => React.Component<P, S>\r\n    // tslint:disable-next-line:no-any\r\n  ): any {\r\n    const resultClass = class ComponentWithInjectedProps extends React.Component<P, {}> {\r\n      public static displayName: string = 'Customized' + scope;\r\n\r\n      public static contextTypes = CustomizableContextTypes;\r\n\r\n      // tslint:disable-next-line:no-any\r\n      constructor(props: P, context: any) {\r\n        super(props, context);\r\n\r\n        this._onSettingChanged = this._onSettingChanged.bind(this);\r\n      }\r\n\r\n      public componentDidMount(): void {\r\n        Customizations.observe(this._onSettingChanged);\r\n      }\r\n\r\n      public componentWillUnmount(): void {\r\n        Customizations.unobserve(this._onSettingChanged);\r\n      }\r\n\r\n      public render(): JSX.Element {\r\n        const defaultProps = Customizations.getSettings(fields, scope, this.context.customizations);\r\n\r\n        // tslint:disable-next-line:no-any\r\n        const componentProps = this.props as any;\r\n\r\n        if (concatStyles) {\r\n          const mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);\r\n          return <ComposedComponent {...defaultProps} {...componentProps} styles={mergedStyles} />;\r\n        }\r\n\r\n        return <ComposedComponent {...defaultProps} {...componentProps} />;\r\n      }\r\n\r\n      private _onSettingChanged(): void {\r\n        this.forceUpdate();\r\n      }\r\n    };\r\n\r\n    return hoistStatics(ComposedComponent, resultClass);\r\n  };\r\n}\r\n"]}