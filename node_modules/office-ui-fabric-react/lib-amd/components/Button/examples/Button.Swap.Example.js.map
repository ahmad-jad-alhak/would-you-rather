{"version":3,"file":"Button.Swap.Example.js","sourceRoot":"../src/","sources":["components/Button/examples/Button.Swap.Example.tsx"],"names":[],"mappings":";;;IAUA;QAAuC,6CAAsD;QAI3F,2BAAmB,KAAmB;YAAtC,YACE,kBAAM,KAAK,CAAC,SAOb;YAqCO,mBAAa,GAAG,UAAC,GAAQ;gBAC/B,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAgB,CAAC;YAC5D,CAAC,CAAC;YAEM,cAAQ,GAAG;gBACjB,kCAAkC;gBAClC,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;YACtD,CAAC,CAAC;YAjDA,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,IAAI;aAChB,CAAC;;QACJ,CAAC;QAEM,+CAAmB,GAA1B,UAA2B,SAAuB,EAAE,SAAkC;YACpF,+CAA+C;YAC/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,KAAK,IAAI,CAAC,SAAS,CAAC;QAC5D,CAAC;QAEM,8CAAkB,GAAzB,UAA0B,SAAuB,EAAE,SAAkC;YACnF,oDAAoD;YACpD,mEAAmE;YACnE,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,aAAa,KAAK,IAAI,CAAC,SAAS,EAAE;gBAC9D,IAAI,CAAC,SAAU,CAAC,KAAK,EAAE,CAAC;aACzB;QACH,CAAC;QAEM,kCAAM,GAAb;YACU,IAAA,gCAAS,CAAgB;YAC3B,IAAA,eAAkC,EAAhC,sBAAQ,EAAE,oBAAO,CAAgB;YACzC,IAAM,IAAI,GAAG,MAAM,CAAC;YAEpB,mCAAmC;YACnC,IAAM,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,CACzB,oBAAC,sBAAa,IAAC,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,IACjG,IAAI,CACS,CACjB,CAAC,CAAC,CAAC,CACF,oBAAC,sBAAa,IAAC,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,IACjG,IAAI,CACS,CACjB,CAAC;YAEF,IAAM,aAAa,GAAG,8BAAkB,EAA4D,CAAC;YACrG,IAAM,UAAU,GAAG,aAAa,CAAC,uCAAS,EAAE,EAAE,CAAC,CAAC;YAEhD,OAAO,6BAAK,SAAS,EAAE,eAAG,CAAC,UAAU,CAAC,OAAO,CAAC,IAAG,MAAM,CAAO,CAAC;QACjE,CAAC;QAUH,wBAAC;IAAD,CAAC,AAzDD,CAAuC,KAAK,CAAC,SAAS,GAyDrD;IAzDY,8CAAiB","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { css, classNamesFunction } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { getStyles, IButtonBasicExampleStyleProps, IButtonBasicExampleStyles } from './Button.Basic.Example.styles';\r\nimport { DefaultButton, PrimaryButton, IButtonProps } from 'office-ui-fabric-react/lib/Button';\r\n\r\nexport interface IButtonSwapExampleState {\r\n  isPrimary: boolean;\r\n}\r\n\r\nexport class ButtonSwapExample extends React.Component<IButtonProps, IButtonSwapExampleState> {\r\n  private buttonRef: HTMLElement | null;\r\n  private hasFocus: boolean;\r\n\r\n  public constructor(props: IButtonProps) {\r\n    super(props);\r\n\r\n    this.hasFocus = false;\r\n    this.buttonRef = null;\r\n    this.state = {\r\n      isPrimary: true\r\n    };\r\n  }\r\n\r\n  public componentWillUpdate(nextProps: IButtonProps, nextState: IButtonSwapExampleState): void {\r\n    // check to see if our button element has focus\r\n    this.hasFocus = document.activeElement === this.buttonRef;\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IButtonProps, prevState: IButtonSwapExampleState): void {\r\n    // if our button previously had focus but we lost it\r\n    // because we switched the control type, we need to set focus again\r\n    if (this.hasFocus && document.activeElement !== this.buttonRef) {\r\n      this.buttonRef!.focus();\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { isPrimary } = this.state;\r\n    const { disabled, checked } = this.props;\r\n    const text = 'Swap';\r\n\r\n    // determine which button to render\r\n    const button = isPrimary ? (\r\n      <PrimaryButton ref={this._setButtonRef} disabled={disabled} checked={checked} onClick={this._onClick}>\r\n        {text}\r\n      </PrimaryButton>\r\n    ) : (\r\n      <DefaultButton ref={this._setButtonRef} disabled={disabled} checked={checked} onClick={this._onClick}>\r\n        {text}\r\n      </DefaultButton>\r\n    );\r\n\r\n    const getClassNames = classNamesFunction<IButtonBasicExampleStyleProps, IButtonBasicExampleStyles>();\r\n    const classNames = getClassNames(getStyles, {});\r\n\r\n    return <div className={css(classNames.example)}>{button}</div>;\r\n  }\r\n\r\n  private _setButtonRef = (ref: any): void => {\r\n    this.buttonRef = ReactDOM.findDOMNode(ref) as HTMLElement;\r\n  };\r\n\r\n  private _onClick = (): void => {\r\n    // change the button type on click\r\n    this.setState({ isPrimary: !this.state.isPrimary });\r\n  };\r\n}\r\n"]}